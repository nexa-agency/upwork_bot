import asyncio
import logging
import os
import sys
import openai
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import (
    BotCommand,
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.client.default import DefaultBotProperties

from middlewares.throttling import ThrottlingMiddleware
# from utils.db import create_db
from config import TELEGRAM_TOKEN
from handlers import commands, jobs  # Corrected import

sys.path.append(os.getcwd())

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–∞—à OpenAI API –∫–ª—é—á
openai.api_key = "YOUR_OPENAI_API_KEY"

# –ü—Ä–æ–º—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞
POST_PROMPT = """
Generate a professional LinkedIn post for a software development team. The post should highlight the team's expertise in full-cycle product development, Web3, SaaS, and automation solutions. Include benefits of working with the team, such as cost-effectiveness, scalability, and tailored solutions for startups. Use a professional and engaging tone.
"""

# –ü—Ä–æ–º—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
IMAGE_PROMPT = (
    "Futuristic 3D illustration of floating glossy geometric shapes (discs, cylinders, torus) "
    "with soft translucent materials, iridescent blue gradients, neon rim lighting, and a glowing "
    "purple-blue gradient background. Clean, minimal, abstract composition with depth and reflections, modern digital art style."
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middlewares
dp.message.middleware(ThrottlingMiddleware(limit=1))


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è handlers
async def set_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
        BotCommand(command="filters", description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"),
        BotCommand(command="pause", description="–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–ø–æ–¥–∞—á—É"),
        BotCommand(command="resume", description="–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–ø–æ–¥–∞—á—É"),
    ]
    await bot.set_my_commands(commands)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenAI API
async def generate_post_text():
    response = openai.Completion.create(
        engine="text-davinci-003", prompt=POST_PROMPT, max_tokens=300, temperature=0.7
    )
    return response["choices"][0]["text"].strip()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ OpenAI API
async def generate_image():
    response = openai.Image.create(prompt=IMAGE_PROMPT, n=1, size="1920x720")
    return response["data"][0]["url"]


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞
async def send_post(chat_id: int, bot: Bot):
    post_text = await generate_post_text()
    image_url = await generate_image()
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="regenerate_post")
    )
    await bot.send_photo(
        chat_id=chat_id,
        photo=image_url,
        caption=post_text,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN,
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /generate_post
@dp.message(commands=["generate_post"])
async def handle_generate_post(message: Message):
    await send_post(message.chat.id, bot)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å"
@dp.callback_query(lambda c: c.data == "regenerate_post")
async def handle_regenerate_post(callback_query: types.CallbackQuery):
    await send_post(callback_query.message.chat.id, bot)
    await callback_query.answer()


# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
scheduler = AsyncIOScheduler()


async def daily_post():
    chat_id = "YOUR_BOT_CHAT_ID"  # –£–∫–∞–∂–∏—Ç–µ ID —á–∞—Ç–∞ –±–æ—Ç–∞
    await send_post(chat_id, bot)


# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler.add_job(daily_post, "cron", hour=9)  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9 —É—Ç—Ä–∞
scheduler.start()


async def main():
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await create_db()

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    await set_commands(bot)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è handlers
    dp.include_router(commands.router)  # Corrected usage
    dp.include_router(jobs.router)  # Removed line

    # –ó–∞–ø—É—Å–∫ polling
    try:
        await dp.start_polling(bot, skip_updates=True)
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())
